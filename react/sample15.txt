using Microsoft.AspNetCore.Mvc;
using System;
using System.IO;
using System.Threading.Tasks;

namespace Base64ImageService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ImagesController : ControllerBase
    {
        // POST: api/images/upload
        [HttpPost("upload")]
        public async Task<IActionResult> UploadImage([FromForm] IFormFile image)
        {
            if (image == null || image.Length == 0)
                return BadRequest("No image provided.");

            try
            {
                using var memoryStream = new MemoryStream();
                await image.CopyToAsync(memoryStream);
                var base64String = Convert.ToBase64String(memoryStream.ToArray());
                return Ok(new { base64Image = base64String });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // GET: api/images/getbase64?filename=image.png
        [HttpGet("getbase64")]
        public IActionResult GetImageAsBase64([FromQuery] string filename)
        {
            // Define the path to the image (you can change this to your actual image path)
            var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "Images", filename);

            if (!System.IO.File.Exists(imagePath))
                return NotFound("Image not found.");

            try
            {
                // Read the image file into a byte array
                var imageBytes = System.IO.File.ReadAllBytes(imagePath);

                // Convert the byte array to a Base64 string
                var base64String = Convert.ToBase64String(imageBytes);

                return Ok(new { base64Image = base64String });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}